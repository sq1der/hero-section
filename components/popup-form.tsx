"use client"

import { useEffect, useRef, useState } from "react"
import { X } from "lucide-react"
import { usePopup } from "@/context/popup-context"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"

export default function PopupForm() {
  const [isLoading, setIsLoading] = useState(false)
  const { isOpen, formType, closePopup } = usePopup()
  const formRef = useRef<HTMLDivElement>(null)

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Ñ–æ—Ä–º—ã
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (formRef.current && !formRef.current.contains(event.target as Node)) {
        closePopup()
      }
    }

    if (isOpen) {
      document.addEventListener("mousedown", handleClickOutside)
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [isOpen, closePopup])

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
  useEffect(() => {
    const handleEscKey = (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        closePopup()
      }
    }

    if (isOpen) {
      document.addEventListener("keydown", handleEscKey)
    }

    return () => {
      document.removeEventListener("keydown", handleEscKey)
    }
  }, [isOpen, closePopup])

  if (!isOpen) return null

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const getFormTitle = () => {
    switch (formType) {
      case "contact":
        return "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
      case "landing":
        return "–ó–∞–∫–∞–∑–∞—Ç—å Landing Page"
      case "corporate":
        return "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç"
      case "store":
        return "–ó–∞–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"
      default:
        return "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
    }
  }
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    
    const formData = new FormData(e.currentTarget as HTMLFormElement)
    const data = {
      name: formData.get('name') as string,
      email: formData.get('email') as string,
      phone: formData.get('phone') as string,
      message: formData.get('message') as string || '',
      formType: formType || 'default'
    }

    try {
      await sendToTelegram(data)
      alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.')
      closePopup()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    } finally {
      setIsLoading(false)
    }
  }
  const sendToTelegram = async (data: {
    name: string
    email: string
    phone: string
    message: string
    formType: string
  }) => {
    const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN
    const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID
    
    const text = `üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (${data.formType})!\n\nüë§ –ò–º—è: ${data.name}\nüìß Email: ${data.email}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
      })
    })
    
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram')
  }


  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm p-4 animate-fadeIn">
      <div
        ref={formRef}
        className="bg-gray-900 rounded-xl border border-gray-800 w-full max-w-md p-6 shadow-xl animate-scaleIn"
      >
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-xl font-bold">{getFormTitle()}</h3>
          <button
            onClick={closePopup}
            className="text-gray-400 hover:text-white transition-colors p-1 rounded-full hover:bg-gray-800"
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
          >
            <X size={20} />
          </button>
        </div>

        <form className="space-y-4" onSubmit={handleSubmit}>
          <div className="space-y-2">
            <Label htmlFor="name">–í–∞—à–µ –∏–º—è</Label>
            <Input
              id="name"
              name="name"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              required
              className="bg-gray-800 border-gray-700 focus:border-blue-500"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              name="email"
              type="email"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
              required
              className="bg-gray-800 border-gray-700 focus:border-blue-500"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
            <Input
              id="phone"
              name="phone"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
              className="bg-gray-800 border-gray-700 focus:border-blue-500"
            />
          </div>

          {formType !== "contact" && (
            <div className="space-y-2">
              <Label htmlFor="message">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</Label>
              <Textarea
                id="message"
                name="message"
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∑–∞–¥–∞—á—É"
                className="bg-gray-800 border-gray-700 focus:border-blue-500 min-h-[100px]"
              />
            </div>
          )}

          <div className="pt-2">
          <Button 
        type="submit" 
        className="w-full bg-blue-600 hover:bg-blue-700"
        disabled={isLoading}
      >
        {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
      </Button>
          </div>

          <p className="text-xs text-gray-400 text-center mt-4">
            –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–µ–π{" "}
            <a href="#" className="text-blue-400 hover:underline">
              –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </a>
          </p>
        </form>
      </div>
    </div>
  )
}
